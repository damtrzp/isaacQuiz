{"ast":null,"code":"var _jsxFileName = \"/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/generateQuestion.js\";\nimport React from \"react\";\nimport { QualityQuestion, ChargeQuestion } from \"./Questions/questions\";\nimport QuestionType from \"./enum\"; // Charge question answer formatting\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChargeAnswer(amount) {\n  let unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  let answer = `${amount} ${unit}`[0].toUpperCase();\n  return answer;\n}\n\n_c = ChargeAnswer;\n\nfunction shuffledArray(array) {\n  let newArray = [...array];\n\n  for (let i = newArray.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    let temp = newArray[i];\n    newArray[i] = newArray[j];\n    newArray[j] = temp;\n  }\n\n  return newArray;\n}\n\nfunction generateQuestion() {\n  return new Promise((resolve, reject) => {\n    // 718 items as of now\n    let itemsAmount = 718;\n    let activeItemIds = [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 49, 56, 58, 65, 66, 77, 78, 83, 84, 85, 86, 93, 97, 102, 105, 107, 111, 123, 124, 126, 127, 130, 133, 135, 136, 137, 145, 146, 158, 160, 164, 166, 171, 175, 177, 181, 186, 192, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 323, 324, 325, 326, 338, 347, 348, 349, 351, 352, 357, 382, 383, 386, 396, 406, 419, 422, 427, 434, 437, 439, 441, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 504, 507, 508, 510, 512, 515, 516, 521, 522, 523, 527, 536, 540, 545, 549, 550, 552, 555, 556, 557, 577, 578, 580, 584, 585, 604, 605, 609, 611, 622, 623, 625, 628, 631, 635, 636, 638, 639, 640, 642, 650, 653, 655, 685, 687, 703, 705, 706, 709, 710, 711, 712, 713, 714, 715, 719, 720, 722, 723, 728, 729];\n    let possibleAnswersSeconds = [1, 2, 3, 4, 6];\n    let possibleAnswersSecondsSpecial = [7, 10, 15, 16]; // Get random question type\n\n    let questionType = Math.floor(Object.keys(QuestionType).length * Math.random());\n    let apiUrl = \"\"; // Quality Questions\n\n    if (questionType == QuestionType.QualityQuestion) {\n      let itemId = Math.floor(Math.random() * itemsAmount);\n      fetch(`${apiUrl}/api/items/${itemId}`).then(response => response.json()).then(data => {\n        let question = {\n          question: /*#__PURE__*/_jsxDEV(QualityQuestion, {\n            itemName: data.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this),\n          correctAnswer: data.quality,\n          answers: [0, 1, 2, 3, 4]\n        };\n        resolve(question);\n      });\n    } // Charge Questions\n\n\n    if (questionType == QuestionType.ChargeQuestion) {\n      console.log(shuffledArray(possibleAnswersSeconds));\n      let itemId = activeItemIds[Math.floor(Math.random() * activeItemIds.length)];\n      fetch(`${apiUrl}/api/items/${itemId}`).then(response => response.json()).then(data => {\n        let answers = [ChargeAnswer(\"unlimited\"), ChargeAnswer(\"one time use\")];\n\n        if (data.rechargeTime.unit == \"s\") {\n          let randomAnswers;\n        }\n\n        let question = {\n          question: /*#__PURE__*/_jsxDEV(ChargeQuestion, {\n            itemName: data.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this),\n          correctAnswer: ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit),\n          answers: [0, 1, 2, 3, 4]\n        };\n        resolve(question);\n      });\n    }\n  });\n}\n\nasync function generateMultipleQuestions(questionAmount) {\n  let questions = [];\n\n  for (let i = 0; i < questionAmount; i++) {\n    let question = await generateQuestion();\n    questions.push(question);\n    console.log(question);\n  }\n\n  return questions;\n}\n\nexport { generateQuestion, generateMultipleQuestions };\n\nvar _c;\n\n$RefreshReg$(_c, \"ChargeAnswer\");","map":{"version":3,"sources":["/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/generateQuestion.js"],"names":["React","QualityQuestion","ChargeQuestion","QuestionType","ChargeAnswer","amount","unit","answer","toUpperCase","shuffledArray","array","newArray","i","length","j","Math","floor","random","temp","generateQuestion","Promise","resolve","reject","itemsAmount","activeItemIds","possibleAnswersSeconds","possibleAnswersSecondsSpecial","questionType","Object","keys","apiUrl","itemId","fetch","then","response","json","data","question","name","correctAnswer","quality","answers","console","log","rechargeTime","randomAnswers","generateMultipleQuestions","questionAmount","questions","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,eAAR,EAAyBC,cAAzB,QAA8C,uBAA9C;AACA,OAAOC,YAAP,MAAyB,QAAzB,C,CAEA;;;;AACA,SAASC,YAAT,CAAsBC,MAAtB,EAAyC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACvC,MAAIC,MAAM,GAAI,GAAEF,MAAO,IAAGC,IAAK,EAAlB,CAAoB,CAApB,EAAuBE,WAAvB,EAAb;AACA,SAAOD,MAAP;AACD;;KAHQH,Y;;AAIT,SAASK,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,QAAQ,GAAG,CAAC,GAAGD,KAAJ,CAAf;;AACA,OAAK,IAAIE,CAAC,GAAGD,QAAQ,CAACE,MAAT,GAAkB,CAA/B,EAAkCD,CAAC,GAAG,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC1C,QAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,QAAIM,IAAI,GAAGP,QAAQ,CAACC,CAAD,CAAnB;AACAD,IAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcD,QAAQ,CAACG,CAAD,CAAtB;AACAH,IAAAA,QAAQ,CAACG,CAAD,CAAR,GAAcI,IAAd;AACH;;AACD,SAAOP,QAAP;AACD;;AAED,SAASQ,gBAAT,GAA4B;AACxB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC;AACA,QAAIC,WAAW,GAAG,GAAlB;AACA,QAAIC,aAAa,GAAG,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,EAAgB,EAAhB,EAAmB,EAAnB,EAAsB,EAAtB,EAAyB,EAAzB,EAA4B,EAA5B,EAA+B,EAA/B,EAAkC,EAAlC,EAAqC,EAArC,EAAwC,EAAxC,EAA2C,EAA3C,EAA8C,EAA9C,EAAiD,EAAjD,EAAoD,EAApD,EAAuD,EAAvD,EAA0D,EAA1D,EAA6D,EAA7D,EAAgE,EAAhE,EAAmE,EAAnE,EAAsE,EAAtE,EAAyE,EAAzE,EAA4E,EAA5E,EAA+E,GAA/E,EAAmF,GAAnF,EAAuF,GAAvF,EAA2F,GAA3F,EAA+F,GAA/F,EAAmG,GAAnG,EAAuG,GAAvG,EAA2G,GAA3G,EAA+G,GAA/G,EAAmH,GAAnH,EAAuH,GAAvH,EAA2H,GAA3H,EAA+H,GAA/H,EAAmI,GAAnI,EAAuI,GAAvI,EAA2I,GAA3I,EAA+I,GAA/I,EAAmJ,GAAnJ,EAAuJ,GAAvJ,EAA2J,GAA3J,EAA+J,GAA/J,EAAmK,GAAnK,EAAuK,GAAvK,EAA2K,GAA3K,EAA+K,GAA/K,EAAmL,GAAnL,EAAuL,GAAvL,EAA2L,GAA3L,EAA+L,GAA/L,EAAmM,GAAnM,EAAuM,GAAvM,EAA2M,GAA3M,EAA+M,GAA/M,EAAmN,GAAnN,EAAuN,GAAvN,EAA2N,GAA3N,EAA+N,GAA/N,EAAmO,GAAnO,EAAuO,GAAvO,EAA2O,GAA3O,EAA+O,GAA/O,EAAmP,GAAnP,EAAuP,GAAvP,EAA2P,GAA3P,EAA+P,GAA/P,EAAmQ,GAAnQ,EAAuQ,GAAvQ,EAA2Q,GAA3Q,EAA+Q,GAA/Q,EAAmR,GAAnR,EAAuR,GAAvR,EAA2R,GAA3R,EAA+R,GAA/R,EAAmS,GAAnS,EAAuS,GAAvS,EAA2S,GAA3S,EAA+S,GAA/S,EAAmT,GAAnT,EAAuT,GAAvT,EAA2T,GAA3T,EAA+T,GAA/T,EAAmU,GAAnU,EAAuU,GAAvU,EAA2U,GAA3U,EAA+U,GAA/U,EAAmV,GAAnV,EAAuV,GAAvV,EAA2V,GAA3V,EAA+V,GAA/V,EAAmW,GAAnW,EAAuW,GAAvW,EAA2W,GAA3W,EAA+W,GAA/W,EAAmX,GAAnX,EAAuX,GAAvX,EAA2X,GAA3X,EAA+X,GAA/X,EAAmY,GAAnY,EAAuY,GAAvY,EAA2Y,GAA3Y,EAA+Y,GAA/Y,EAAmZ,GAAnZ,EAAuZ,GAAvZ,EAA2Z,GAA3Z,EAA+Z,GAA/Z,EAAma,GAAna,EAAua,GAAva,EAA2a,GAA3a,EAA+a,GAA/a,EAAmb,GAAnb,EAAub,GAAvb,EAA2b,GAA3b,EAA+b,GAA/b,EAAmc,GAAnc,EAAuc,GAAvc,EAA2c,GAA3c,EAA+c,GAA/c,EAAmd,GAAnd,EAAud,GAAvd,EAA2d,GAA3d,EAA+d,GAA/d,EAAme,GAAne,EAAue,GAAve,EAA2e,GAA3e,EAA+e,GAA/e,EAAmf,GAAnf,EAAuf,GAAvf,EAA2f,GAA3f,EAA+f,GAA/f,EAAmgB,GAAngB,EAAugB,GAAvgB,EAA2gB,GAA3gB,EAA+gB,GAA/gB,EAAmhB,GAAnhB,EAAuhB,GAAvhB,EAA2hB,GAA3hB,EAA+hB,GAA/hB,EAAmiB,GAAniB,EAAuiB,GAAviB,EAA2iB,GAA3iB,EAA+iB,GAA/iB,EAAmjB,GAAnjB,EAAujB,GAAvjB,EAA2jB,GAA3jB,EAA+jB,GAA/jB,EAAmkB,GAAnkB,EAAukB,GAAvkB,EAA2kB,GAA3kB,EAA+kB,GAA/kB,EAAmlB,GAAnlB,EAAulB,GAAvlB,EAA2lB,GAA3lB,EAA+lB,GAA/lB,EAAmmB,GAAnmB,EAAumB,GAAvmB,EAA2mB,GAA3mB,EAA+mB,GAA/mB,EAAmnB,GAAnnB,EAAunB,GAAvnB,EAA2nB,GAA3nB,EAA+nB,GAA/nB,EAAmoB,GAAnoB,CAApB;AACE,QAAIC,sBAAsB,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAA7B;AACA,QAAIC,6BAA6B,GAAG,CAAC,CAAD,EAAG,EAAH,EAAM,EAAN,EAAS,EAAT,CAApC,CALkC,CAMpC;;AACA,QAAIC,YAAY,GAAGZ,IAAI,CAACC,KAAL,CAAWY,MAAM,CAACC,IAAP,CAAY1B,YAAZ,EAA0BU,MAA1B,GAAmCE,IAAI,CAACE,MAAL,EAA9C,CAAnB;AACA,QAAIa,MAAM,GAAG,EAAb,CARoC,CASpC;;AACA,QAAGH,YAAY,IAAIxB,YAAY,CAACF,eAAhC,EAAiD;AAC/C,UAAI8B,MAAM,GAAGhB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBM,WAA3B,CAAb;AACAS,MAAAA,KAAK,CAAE,GAAEF,MAAO,cAAaC,MAAO,EAA/B,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZ,YAAIC,QAAQ,GAAG;AACbA,UAAAA,QAAQ,eAAE,QAAC,eAAD;AAAiB,YAAA,QAAQ,EAAED,IAAI,CAACE;AAAhC;AAAA;AAAA;AAAA;AAAA,kBADG;AAEbC,UAAAA,aAAa,EAAEH,IAAI,CAACI,OAFP;AAGbC,UAAAA,OAAO,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT;AAHI,SAAf;AAKApB,QAAAA,OAAO,CAACgB,QAAD,CAAP;AACD,OATD;AAUD,KAtBmC,CAuBpC;;;AACA,QAAGV,YAAY,IAAIxB,YAAY,CAACD,cAAhC,EAAgD;AAC9CwC,MAAAA,OAAO,CAACC,GAAR,CAAYlC,aAAa,CAACgB,sBAAD,CAAzB;AACA,UAAIM,MAAM,GAAGP,aAAa,CAACT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBO,aAAa,CAACX,MAAzC,CAAD,CAA1B;AACAmB,MAAAA,KAAK,CAAE,GAAEF,MAAO,cAAaC,MAAO,EAA/B,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZ,YAAIK,OAAO,GAAG,CAACrC,YAAY,CAAC,WAAD,CAAb,EAA4BA,YAAY,CAAC,cAAD,CAAxC,CAAd;;AACA,YAAGgC,IAAI,CAACQ,YAAL,CAAkBtC,IAAlB,IAA0B,GAA7B,EAAkC;AAChC,cAAIuC,aAAJ;AAED;;AACD,YAAIR,QAAQ,GAAG;AACbA,UAAAA,QAAQ,eAAE,QAAC,cAAD;AAAgB,YAAA,QAAQ,EAAED,IAAI,CAACE;AAA/B;AAAA;AAAA;AAAA;AAAA,kBADG;AAEbC,UAAAA,aAAa,EAAEnC,YAAY,CAACgC,IAAI,CAACQ,YAAL,CAAkBvC,MAAnB,EAA2B+B,IAAI,CAACQ,YAAL,CAAkBtC,IAA7C,CAFd;AAGbmC,UAAAA,OAAO,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT;AAHI,SAAf;AAKApB,QAAAA,OAAO,CAACgB,QAAD,CAAP;AACD,OAdD;AAeD;AACF,GA3CI,CAAP;AA4CH;;AACD,eAAeS,yBAAf,CAAyCC,cAAzC,EAAyD;AACvD,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAI,IAAIpC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGmC,cAAnB,EAAmCnC,CAAC,EAApC,EAAwC;AACtC,QAAIyB,QAAQ,GAAG,MAAMlB,gBAAgB,EAArC;AACA6B,IAAAA,SAAS,CAACC,IAAV,CAAeZ,QAAf;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACD;;AACD,SAAOW,SAAP;AACD;;AAED,SAAQ7B,gBAAR,EAA0B2B,yBAA1B","sourcesContent":["import React from \"react\";\nimport {QualityQuestion, ChargeQuestion} from \"./Questions/questions\";\nimport QuestionType from \"./enum\";\n\n// Charge question answer formatting\nfunction ChargeAnswer(amount, unit = \"\") {\n  let answer = `${amount} ${unit}`[0].toUpperCase()\n  return answer;\n}\nfunction shuffledArray(array) {\n  let newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = newArray[i];\n      newArray[i] = newArray[j];\n      newArray[j] = temp;\n  }\n  return newArray;\n}\n\nfunction generateQuestion() {\n    return new Promise((resolve, reject) => {\n        // 718 items as of now\n        let itemsAmount = 718\n        let activeItemIds = [33,34,35,36,37,38,39,40,41,42,44,45,47,49,56,58,65,66,77,78,83,84,85,86,93,97,102,105,107,111,123,124,126,127,130,133,135,136,137,145,146,158,160,164,166,171,175,177,181,186,192,282,283,284,285,287,288,289,290,291,292,293,294,295,296,297,298,323,324,325,326,338,347,348,349,351,352,357,382,383,386,396,406,419,422,427,434,437,439,441,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,504,507,508,510,512,515,516,521,522,523,527,536,540,545,549,550,552,555,556,557,577,578,580,584,585,604,605,609,611,622,623,625,628,631,635,636,638,639,640,642,650,653,655,685,687,703,705,706,709,710,711,712,713,714,715,719,720,722,723,728,729];\n          let possibleAnswersSeconds = [1,2,3,4,6];\n          let possibleAnswersSecondsSpecial = [7,10,15,16]\n        // Get random question type\n        let questionType = Math.floor(Object.keys(QuestionType).length * Math.random())\n        let apiUrl = \"\"\n        // Quality Questions\n        if(questionType == QuestionType.QualityQuestion) {\n          let itemId = Math.floor(Math.random() * itemsAmount);\n          fetch(`${apiUrl}/api/items/${itemId}`)\n          .then(response => response.json())\n          .then(data => {\n            let question = {\n              question: <QualityQuestion itemName={data.name}></QualityQuestion>,\n              correctAnswer: data.quality,\n              answers: [0,1,2,3,4]\n            }\n            resolve(question);\n          });\n        }\n        // Charge Questions\n        if(questionType == QuestionType.ChargeQuestion) {\n          console.log(shuffledArray(possibleAnswersSeconds))\n          let itemId = activeItemIds[Math.floor(Math.random() * activeItemIds.length)]\n          fetch(`${apiUrl}/api/items/${itemId}`)\n          .then(response => response.json())\n          .then(data => {\n            let answers = [ChargeAnswer(\"unlimited\"), ChargeAnswer(\"one time use\")]\n            if(data.rechargeTime.unit == \"s\") {\n              let randomAnswers;\n              \n            }\n            let question = {\n              question: <ChargeQuestion itemName={data.name}></ChargeQuestion>,\n              correctAnswer: ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit),\n              answers: [0,1,2,3,4]\n            }\n            resolve(question);\n          });\n        }\n      })\n}\nasync function generateMultipleQuestions(questionAmount) {\n  let questions = []\n  for(let i = 0; i < questionAmount; i++) {\n    let question = await generateQuestion()\n    questions.push(question)\n    console.log(question);\n  }\n  return questions;\n}\n\nexport {generateQuestion, generateMultipleQuestions};"]},"metadata":{},"sourceType":"module"}