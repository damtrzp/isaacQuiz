{"ast":null,"code":"var _jsxFileName = \"/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/Quiz.js\";\nimport React, { Component } from 'react';\nimport { QualityQuestion } from './Questions/questionsComponents.js';\nimport QualityQuestionData from './quizData.js';\nimport QuestionType from './enum.js';\nimport { generateQuestion, generateMultipleQuestions } from './generateQuestion.js';\nimport Answers from './Answers.js';\nimport StartView from '../StartView.js';\nimport update from 'immutability-helper';\nimport { Simulate } from 'react-dom/cjs/react-dom-test-utils.production.min';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Quiz extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quizStarted: false,\n      currentQuestion: 0,\n      questions: [],\n      loading: false\n    };\n    this.startFunc = this.startFunc.bind(this);\n    this.answer = this.answer.bind(this);\n    this.endQuiz = this.endQuiz.bind(this);\n  }\n\n  startFunc() {\n    // Start the loading animation\n    this.setState({\n      loading: true\n    }); // Generate the questions\n\n    generateMultipleQuestions(3).then(questions => {\n      console.log(questions);\n      this.setState({\n        loading: false,\n        quizStarted: true,\n        questions: questions\n      });\n    });\n  }\n\n  answer(correct) {\n    if (correct) {\n      // Add an answered correctly flag to the current question\n      let newQuestions = { ...this.state.questions\n      };\n      newQuestions[this.state.currentQuestion].answeredCorrectly = true;\n      this.setState({\n        questions: newQuestions\n      });\n    } // Move to the next question, fade out and in\n    // Similiar function in Answers Component\n\n\n    document.getElementById(\"quiz\").style.opacity = 0;\n    setTimeout(() => {\n      this.setState({\n        currentQuestion: this.state.currentQuestion + 1\n      });\n      document.getElementById(\"quiz\").style.opacity = \"100%\";\n    }, 700);\n  }\n\n  endQuiz() {\n    // The array that contains objects with a question type, the number of correct answers from that type and total answers from that type \n    let summary = [];\n    this.state.questions.forEach(question => {\n      let questionType = question.questionType.displayName;\n      let summaryIndex; // Get the summary entry object with the matching question type\n\n      let summaryObject = summary.filter((question, i) => {\n        if (question.questionType != questionType) summaryIndex = i;\n        return question.questionType != questionType;\n      })[0]; // Apply changes to summary\n\n      if (summaryObject) {\n        if (question.answeredCorrectly) summaryObject.correctAnswers += 1;\n      } else {\n        let correctAnswers = summaryObject.correctAnswer;\n        if (question.answeredCorrectly) correctAnswers += 1;\n        summaryObject = {\n          questionType: questionType,\n          correctAnswers: correctAnswers,\n          totalAnswers: summaryObject.totalAnswers + 1\n        };\n        summary.push(summaryObject);\n      }\n    }); // Change the questionType properties to more readable ones for displaying in the summary\n\n    summary.forEach(el => {\n      el.questionType = el.questionType.replace(/([A-Z])/g, ' $1').trim();\n    });\n  }\n\n  render() {\n    let currentQuestion = { ...this.state.questions[this.state.currentQuestion]\n    };\n    console.log(currentQuestion.answers);\n    return this.state.quizStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quiz\",\n      children: [currentQuestion.question, /*#__PURE__*/_jsxDEV(Answers, {\n        answers: currentQuestion.answers,\n        correctAnswer: currentQuestion.correctAnswer,\n        answerFunc: this.answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(StartView, {\n      startFunc: this.startFunc,\n      loading: this.state.loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/Quiz.js"],"names":["React","Component","QualityQuestion","QualityQuestionData","QuestionType","generateQuestion","generateMultipleQuestions","Answers","StartView","update","Simulate","Quiz","constructor","props","state","quizStarted","currentQuestion","questions","loading","startFunc","bind","answer","endQuiz","setState","then","console","log","correct","newQuestions","answeredCorrectly","document","getElementById","style","opacity","setTimeout","summary","forEach","question","questionType","displayName","summaryIndex","summaryObject","filter","i","correctAnswers","correctAnswer","totalAnswers","push","el","replace","trim","render","answers"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {QualityQuestion} from './Questions/questionsComponents.js';\nimport QualityQuestionData from './quizData.js';\nimport QuestionType from './enum.js';\nimport {generateQuestion, generateMultipleQuestions} from './generateQuestion.js';\nimport Answers from './Answers.js';\nimport StartView from '../StartView.js';\nimport update from 'immutability-helper';\nimport { Simulate } from 'react-dom/cjs/react-dom-test-utils.production.min';\n\nexport default class Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quizStarted: false,\n      currentQuestion: 0,\n      questions: [],\n      loading: false\n    };\n    \n    this.startFunc = this.startFunc.bind(this);\n    this.answer = this.answer.bind(this);\n    this.endQuiz = this.endQuiz.bind(this);\n  }\n  startFunc() {\n    // Start the loading animation\n    this.setState({loading: true});\n    // Generate the questions\n    generateMultipleQuestions(3).then(questions => {\n      console.log(questions)\n      this.setState({\n        loading: false,\n        quizStarted: true,\n        questions: questions\n      })\n    })\n  }\n  answer(correct) {\n    if(correct) {\n      // Add an answered correctly flag to the current question\n        let newQuestions = {...this.state.questions};\n        newQuestions[this.state.currentQuestion].answeredCorrectly = true;\n        this.setState({\n          questions: newQuestions\n        })\n    }\n  // Move to the next question, fade out and in\n  // Similiar function in Answers Component\n    document.getElementById(\"quiz\").style.opacity = 0;\n    setTimeout(() => {\n      this.setState({\n        currentQuestion: this.state.currentQuestion + 1\n      });\n      document.getElementById(\"quiz\").style.opacity = \"100%\";\n    }, 700)\n    \n  }\n  endQuiz() {\n    // The array that contains objects with a question type, the number of correct answers from that type and total answers from that type \n    let summary = [];\n\n    this.state.questions.forEach((question) => {\n      let questionType = question.questionType.displayName;\n      let summaryIndex;\n      // Get the summary entry object with the matching question type\n      let summaryObject = summary.filter((question,i) => {\n        if(question.questionType != questionType) summaryIndex = i;\n        return question.questionType != questionType;\n      })[0];\n\n      // Apply changes to summary\n      if(summaryObject) {\n        if(question.answeredCorrectly) summaryObject.correctAnswers += 1;\n\n      }\n      else {\n        let correctAnswers = summaryObject.correctAnswer;\n        if(question.answeredCorrectly) correctAnswers += 1;\n        summaryObject = {\n          questionType: questionType,\n          correctAnswers: correctAnswers,\n          totalAnswers: summaryObject.totalAnswers + 1\n        };\n        summary.push(summaryObject)\n      }\n      \n      \n    })\n    // Change the questionType properties to more readable ones for displaying in the summary\n    summary.forEach((el) => {\n      el.questionType = el.questionType.replace(/([A-Z])/g, ' $1').trim();\n    })\n  }\n  render() {\n    let currentQuestion = {...this.state.questions[this.state.currentQuestion]};\n    console.log(currentQuestion.answers);\n    return (\n      this.state.quizStarted ?\n      <div id=\"quiz\">\n        {currentQuestion.question}\n        <Answers \n        answers={currentQuestion.answers}\n        correctAnswer={currentQuestion.correctAnswer}\n        answerFunc={this.answer}\n        ></Answers>\n      </div>\n      :\n      <StartView\n        startFunc={this.startFunc}\n        loading={this.state.loading}\n      ></StartView>\n      \n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}