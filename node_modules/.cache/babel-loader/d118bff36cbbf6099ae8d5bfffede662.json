{"ast":null,"code":"var _jsxFileName = \"/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/generateQuestion.js\";\nimport React from \"react\";\nimport QualityQuestion from \"./Questions/QualityQuestion\";\nimport QuestionType from \"./enum\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction generateQuestion() {\n  return new Promise((resolve, reject) => {\n    // 718 items as of now\n    let itemsAmount = 718; // Get random question type\n\n    let questionType = Math.floor(Object.keys(QuestionType).length * Math.random());\n    let question;\n    let apiUrl = \"\";\n\n    if (questionType == QuestionType.QualityQuestion) {\n      let question;\n      let itemId = Math.floor(Math.random() * itemsAmount); // https://www.platynowy-bog.com.pl/\n\n      fetch(`${apiUrl}/api/items/${itemId}`).then(response => response.json()).then(data => {\n        question = {\n          question: /*#__PURE__*/_jsxDEV(QualityQuestion, {\n            itemName: data.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 25\n          }, this),\n          correctAnswer: data.quality,\n          answers: [0, 1, 2, 3, 4]\n        };\n        resolve(question);\n      });\n    }\n\n    if (questionType == QuestionType.ChargeQuestion) {\n      let question;\n      let itemId = Math.floor(Math.random() * itemsAmount); // https://www.platynowy-bog.com.pl/\n\n      fetch(`${apiUrl}/api/items/${itemId}`).then(response => response.json()).then(data => {\n        question = {\n          question: /*#__PURE__*/_jsxDEV(QualityQuestion, {\n            itemName: data.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 25\n          }, this),\n          correctAnswer: data.quality,\n          answers: [0, 1, 2, 3, 4]\n        };\n        resolve(question);\n      });\n    }\n  });\n}\n\nasync function generateMultipleQuestions(questionAmount) {\n  let questions = [];\n\n  for (let i = 0; i < questionAmount; i++) {\n    let question = await generateQuestion();\n    questions.push(question);\n    console.log(question);\n  }\n\n  return questions;\n}\n\nexport { generateQuestion, generateMultipleQuestions };","map":{"version":3,"sources":["/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/generateQuestion.js"],"names":["React","QualityQuestion","QuestionType","generateQuestion","Promise","resolve","reject","itemsAmount","questionType","Math","floor","Object","keys","length","random","question","apiUrl","itemId","fetch","then","response","json","data","name","correctAnswer","quality","answers","ChargeQuestion","generateMultipleQuestions","questionAmount","questions","i","push","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,YAAP,MAAyB,QAAzB;;;AAGA,SAASC,gBAAT,GAA4B;AACxB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC;AACA,QAAIC,WAAW,GAAG,GAAlB,CAFoC,CAGpC;;AACA,QAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,IAAP,CAAYV,YAAZ,EAA0BW,MAA1B,GAAmCJ,IAAI,CAACK,MAAL,EAA9C,CAAnB;AACA,QAAIC,QAAJ;AACA,QAAIC,MAAM,GAAG,EAAb;;AACA,QAAGR,YAAY,IAAIN,YAAY,CAACD,eAAhC,EAAiD;AAC/C,UAAIc,QAAJ;AACA,UAAIE,MAAM,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACK,MAAL,KAAgBP,WAA3B,CAAb,CAF+C,CAG/C;;AACAW,MAAAA,KAAK,CAAE,GAAEF,MAAO,cAAaC,MAAO,EAA/B,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZP,QAAAA,QAAQ,GAAG;AACTA,UAAAA,QAAQ,eAAE,QAAC,eAAD;AAAiB,YAAA,QAAQ,EAAEO,IAAI,CAACC;AAAhC;AAAA;AAAA;AAAA;AAAA,kBADD;AAETC,UAAAA,aAAa,EAAEF,IAAI,CAACG,OAFX;AAGTC,UAAAA,OAAO,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT;AAHA,SAAX;AAKArB,QAAAA,OAAO,CAACU,QAAD,CAAP;AACD,OATD;AAUD;;AACD,QAAGP,YAAY,IAAIN,YAAY,CAACyB,cAAhC,EAAgD;AAC9C,UAAIZ,QAAJ;AACA,UAAIE,MAAM,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACK,MAAL,KAAgBP,WAA3B,CAAb,CAF8C,CAG9C;;AACAW,MAAAA,KAAK,CAAE,GAAEF,MAAO,cAAaC,MAAO,EAA/B,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZP,QAAAA,QAAQ,GAAG;AACTA,UAAAA,QAAQ,eAAE,QAAC,eAAD;AAAiB,YAAA,QAAQ,EAAEO,IAAI,CAACC;AAAhC;AAAA;AAAA;AAAA;AAAA,kBADD;AAETC,UAAAA,aAAa,EAAEF,IAAI,CAACG,OAFX;AAGTC,UAAAA,OAAO,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT;AAHA,SAAX;AAKArB,QAAAA,OAAO,CAACU,QAAD,CAAP;AACD,OATD;AAUD;AACF,GArCI,CAAP;AAsCH;;AACD,eAAea,yBAAf,CAAyCC,cAAzC,EAAyD;AACvD,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,cAAnB,EAAmCE,CAAC,EAApC,EAAwC;AACtC,QAAIhB,QAAQ,GAAG,MAAMZ,gBAAgB,EAArC;AACA2B,IAAAA,SAAS,CAACE,IAAV,CAAejB,QAAf;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYnB,QAAZ;AACD;;AACD,SAAOe,SAAP;AACD;;AAED,SAAQ3B,gBAAR,EAA0ByB,yBAA1B","sourcesContent":["import React from \"react\";\nimport QualityQuestion from \"./Questions/QualityQuestion\";\nimport QuestionType from \"./enum\";\n\n\nfunction generateQuestion() {\n    return new Promise((resolve, reject) => {\n        // 718 items as of now\n        let itemsAmount = 718\n        // Get random question type\n        let questionType = Math.floor(Object.keys(QuestionType).length * Math.random())\n        let question;\n        let apiUrl = \"\"\n        if(questionType == QuestionType.QualityQuestion) {\n          let question;\n          let itemId = Math.floor(Math.random() * itemsAmount);\n          // https://www.platynowy-bog.com.pl/\n          fetch(`${apiUrl}/api/items/${itemId}`)\n          .then(response => response.json())\n          .then(data => {\n            question = {\n              question: <QualityQuestion itemName={data.name}></QualityQuestion>,\n              correctAnswer: data.quality,\n              answers: [0,1,2,3,4]\n            }\n            resolve(question);\n          });\n        }\n        if(questionType == QuestionType.ChargeQuestion) {\n          let question;\n          let itemId = Math.floor(Math.random() * itemsAmount);\n          // https://www.platynowy-bog.com.pl/\n          fetch(`${apiUrl}/api/items/${itemId}`)\n          .then(response => response.json())\n          .then(data => {\n            question = {\n              question: <QualityQuestion itemName={data.name}></QualityQuestion>,\n              correctAnswer: data.quality,\n              answers: [0,1,2,3,4]\n            }\n            resolve(question);\n          });\n        }\n      })\n}\nasync function generateMultipleQuestions(questionAmount) {\n  let questions = []\n  for(let i = 0; i < questionAmount; i++) {\n    let question = await generateQuestion()\n    questions.push(question)\n    console.log(question);\n  }\n  return questions;\n}\n\nexport {generateQuestion, generateMultipleQuestions};"]},"metadata":{},"sourceType":"module"}