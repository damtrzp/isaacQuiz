{"ast":null,"code":"var _jsxFileName = \"/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/generateQuestion.js\";\nimport React from \"react\";\nimport { QualityQuestion, ChargeQuestion, CharacterUnlockQuestion } from \"./Questions/questions\";\nimport QuestionType from \"./enum\"; // Charge question answer formatting\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChargeAnswer(amount) {\n  let unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  let answer = `${amount} ${unit}`;\n  answer = answer[0].toUpperCase() + answer.slice(1);\n  return answer;\n}\n\n_c = ChargeAnswer;\n\nfunction shuffledArray(array) {\n  let newArray = [...array];\n\n  for (let i = newArray.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    let temp = newArray[i];\n    newArray[i] = newArray[j];\n    newArray[j] = temp;\n  }\n\n  return newArray;\n}\n\nfunction generateQuestion() {\n  return new Promise((resolve, reject) => {\n    // 718 items as of now\n    let itemsAmount = 718;\n    let activeItemIds = [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 49, 56, 58, 65, 66, 77, 78, 83, 84, 85, 86, 93, 97, 102, 105, 107, 111, 123, 124, 126, 127, 130, 133, 135, 136, 137, 145, 146, 158, 160, 164, 166, 171, 175, 177, 181, 186, 192, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 323, 324, 325, 326, 338, 347, 348, 349, 351, 352, 357, 382, 383, 386, 396, 406, 419, 422, 427, 434, 437, 439, 441, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 504, 507, 508, 510, 512, 515, 516, 521, 522, 523, 527, 536, 540, 545, 549, 550, 552, 555, 556, 557, 577, 578, 580, 584, 585, 604, 605, 609, 611, 622, 623, 625, 628, 631, 635, 636, 639, 640, 642, 650, 653, 655, 685, 687, 703, 705, 706, 709, 710, 711, 712, 713, 714, 715, 719, 720, 722, 723, 728, 729];\n    let possibleAnswersSeconds = [ChargeAnswer(1, \"s\"), ChargeAnswer(2, \"s\"), ChargeAnswer(3, \"s\"), ChargeAnswer(4, \"s\"), ChargeAnswer(6, \"s\")];\n    let possibleAnswersSecondsSpecial = [ChargeAnswer(7, \"s\"), ChargeAnswer(10, \"s\"), ChargeAnswer(15, \"s\"), ChargeAnswer(16, \"s\")];\n    let possibleAnswersRooms = [ChargeAnswer(1, \"rooms\"), ChargeAnswer(2, \"rooms\"), ChargeAnswer(3, \"rooms\"), ChargeAnswer(4, \"rooms\"), ChargeAnswer(6, \"rooms\"), ChargeAnswer(12, \"rooms\")]; // Get random question type\n\n    let questionType = Math.floor(Object.keys(QuestionType).length * Math.random());\n    let apiUrl = \"\"; // Quality Questions\n\n    if (questionType == QuestionType.QualityQuestion) {\n      let itemId = Math.floor(Math.random() * itemsAmount);\n      fetch(`${apiUrl}/api/items/${itemId}`).then(response => response.json()).then(data => {\n        let question = {\n          question: /*#__PURE__*/_jsxDEV(QualityQuestion, {\n            itemName: data.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this),\n          correctAnswer: data.quality,\n          answers: [0, 1, 2, 3, 4]\n        };\n        resolve(question);\n      });\n    } // Charge Questions\n    // TO BE REFACTORISED, THE CODE IS AWFUL RIGHT NOW\n\n\n    if (questionType == QuestionType.ChargeQuestion) {\n      let itemId = activeItemIds[Math.floor(Math.random() * activeItemIds.length)];\n      fetch(`${apiUrl}/api/items/${itemId}`).then(response => response.json()).then(data => {\n        let answers = [ChargeAnswer(\"unlimited\"), ChargeAnswer(\"one time use\")]; // Randomise different sets of answers based on the correct answer type\n\n        if (data.rechargeTime.unit == \"s\" && Number(data.rechargeTime.amount) <= 6) {\n          let additionalAnswers = shuffledArray(possibleAnswersSeconds);\n          let correctAnswer = ChargeAnswer(data.rechargeTime.unit, data.rechargeTime.amount);\n          additionalAnswers = additionalAnswers.filter(el => {\n            console.log(el);\n            console.log(correctAnswer);\n            return el != correctAnswer;\n          });\n          answers[2] = additionalAnswers[0];\n          answers[3] = additionalAnswers[1];\n          answers[4] = ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit);\n          answers = shuffledArray(answers);\n        } else if (data.rechargeTime.unit == \"s\" && Number(data.rechargeTime.amount) >= 7) {\n          let additionalAnswers = shuffledArray(possibleAnswersSecondsSpecial);\n          let correctAnswer = ChargeAnswer(data.rechargeTime.unit, data.rechargeTime.amount);\n          additionalAnswers = additionalAnswers.filter(el => {\n            return el != correctAnswer;\n          });\n          answers[2] = additionalAnswers[0];\n          answers[3] = additionalAnswers[1];\n          answers[4] = ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit);\n          answers = shuffledArray(answers);\n        } else if (data.rechargeTime.unit == \"rooms\") {\n          let additionalAnswers = shuffledArray(possibleAnswersRooms);\n          let correctAnswer = ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.rooms);\n          additionalAnswers = additionalAnswers.filter(el => {\n            return el != correctAnswer;\n          });\n          answers[2] = additionalAnswers[0];\n          answers[3] = additionalAnswers[1];\n          answers[4] = ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit);\n          answers = shuffledArray(answers);\n        }\n\n        let question = {\n          question: /*#__PURE__*/_jsxDEV(ChargeQuestion, {\n            itemName: data.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this),\n          correctAnswer: ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit),\n          answers: answers\n        };\n        resolve(question);\n      });\n    }\n\n    if (questionType == QuestionType.CharacterUnlockQuestion) {\n      let itemId = Math.floor(Math.random() * itemsAmount);\n      let characters = [\"Isaac\", \"Magdalene\", \"Cain\", \"Judas\", \"???\", \"Eve\", \"Samson\", \"Azazel\", \"Lazarus\", \"Eden\", \"The Lost\", \"Lilith\", \"Keeper\", \"Apollyon\", \"The Forgotten\", \"Bethany\", \"Jacob and Esau\", \"Tainted Isaac\", \"Tainted Magdalene\", \"Tainted Cain\", \"Tainted Judas\", \"Tainted ???\", \"Tainted Eve\", \"Tainted Samson\", \"Tainted Azazel\", \"Tainted Lazarus\", \"Tainted Eden\", \"Tainted Lost\", \"Tainted Lilith\", \"Tainted Keeper\", \"Tainted Apollyon\", \"Tainted The Forgotten\", \"Tainted Bethany\", \"Tainted Jacob\"];\n      fetch(`${apiUrl}/api/items/${itemId}`).then(response => response.json()).then(data => {\n        let unlockedBy = \"Unlocked By Default\";\n\n        if (data.unlock && data.unlock.character) {\n          unlockedBy = data.unlock.character;\n        }\n\n        let additionalAnswers = shuffledArray([...characters, \"Unlocked By Default\"]);\n        additionalAnswers = additionalAnswers.filter(el => {\n          return el != unlockedBy;\n        });\n        let answers = [unlockedBy, unlockedBy == \"Unlocked By Default\" ? additionalAnswers[0] : \"Unlocked By Default\", additionalAnswers[1], additionalAnswers[2], additionalAnswers[3]];\n        answers = shuffledArray(answers);\n        let question = {\n          question: /*#__PURE__*/_jsxDEV(CharacterUnlockQuestion, {\n            itemName: data.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this),\n          correctAnswer: unlockedBy,\n          answers: answers\n        };\n        resolve(question);\n      });\n    }\n  });\n}\n\nasync function generateMultipleQuestions(questionAmount) {\n  let questions = [];\n\n  for (let i = 0; i < questionAmount; i++) {\n    let question = await generateQuestion();\n    questions.push(question);\n    console.log(question);\n  }\n\n  return questions;\n}\n\nexport { generateQuestion, generateMultipleQuestions };\n\nvar _c;\n\n$RefreshReg$(_c, \"ChargeAnswer\");","map":{"version":3,"sources":["/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/generateQuestion.js"],"names":["React","QualityQuestion","ChargeQuestion","CharacterUnlockQuestion","QuestionType","ChargeAnswer","amount","unit","answer","toUpperCase","slice","shuffledArray","array","newArray","i","length","j","Math","floor","random","temp","generateQuestion","Promise","resolve","reject","itemsAmount","activeItemIds","possibleAnswersSeconds","possibleAnswersSecondsSpecial","possibleAnswersRooms","questionType","Object","keys","apiUrl","itemId","fetch","then","response","json","data","question","name","correctAnswer","quality","answers","rechargeTime","Number","additionalAnswers","filter","el","console","log","rooms","characters","unlockedBy","unlock","character","generateMultipleQuestions","questionAmount","questions","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,eAAR,EAAyBC,cAAzB,EAAyCC,uBAAzC,QAAuE,uBAAvE;AACA,OAAOC,YAAP,MAAyB,QAAzB,C,CAEA;;;;AACA,SAASC,YAAT,CAAsBC,MAAtB,EAAyC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACvC,MAAIC,MAAM,GAAI,GAAEF,MAAO,IAAGC,IAAK,EAA/B;AACAC,EAAAA,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAN,CAAUC,WAAV,KAA0BD,MAAM,CAACE,KAAP,CAAa,CAAb,CAAnC;AACA,SAAOF,MAAP;AACD;;KAJQH,Y;;AAKT,SAASM,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,QAAQ,GAAG,CAAC,GAAGD,KAAJ,CAAf;;AACA,OAAK,IAAIE,CAAC,GAAGD,QAAQ,CAACE,MAAT,GAAkB,CAA/B,EAAkCD,CAAC,GAAG,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC1C,QAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,QAAIM,IAAI,GAAGP,QAAQ,CAACC,CAAD,CAAnB;AACAD,IAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcD,QAAQ,CAACG,CAAD,CAAtB;AACAH,IAAAA,QAAQ,CAACG,CAAD,CAAR,GAAcI,IAAd;AACH;;AACD,SAAOP,QAAP;AACD;;AAED,SAASQ,gBAAT,GAA4B;AACxB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC;AACA,QAAIC,WAAW,GAAG,GAAlB;AACA,QAAIC,aAAa,GAAG,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,EAAgB,EAAhB,EAAmB,EAAnB,EAAsB,EAAtB,EAAyB,EAAzB,EAA4B,EAA5B,EAA+B,EAA/B,EAAkC,EAAlC,EAAqC,EAArC,EAAwC,EAAxC,EAA2C,EAA3C,EAA8C,EAA9C,EAAiD,EAAjD,EAAoD,EAApD,EAAuD,EAAvD,EAA0D,EAA1D,EAA6D,EAA7D,EAAgE,EAAhE,EAAmE,EAAnE,EAAsE,EAAtE,EAAyE,EAAzE,EAA4E,EAA5E,EAA+E,GAA/E,EAAmF,GAAnF,EAAuF,GAAvF,EAA2F,GAA3F,EAA+F,GAA/F,EAAmG,GAAnG,EAAuG,GAAvG,EAA2G,GAA3G,EAA+G,GAA/G,EAAmH,GAAnH,EAAuH,GAAvH,EAA2H,GAA3H,EAA+H,GAA/H,EAAmI,GAAnI,EAAuI,GAAvI,EAA2I,GAA3I,EAA+I,GAA/I,EAAmJ,GAAnJ,EAAuJ,GAAvJ,EAA2J,GAA3J,EAA+J,GAA/J,EAAmK,GAAnK,EAAuK,GAAvK,EAA2K,GAA3K,EAA+K,GAA/K,EAAmL,GAAnL,EAAuL,GAAvL,EAA2L,GAA3L,EAA+L,GAA/L,EAAmM,GAAnM,EAAuM,GAAvM,EAA2M,GAA3M,EAA+M,GAA/M,EAAmN,GAAnN,EAAuN,GAAvN,EAA2N,GAA3N,EAA+N,GAA/N,EAAmO,GAAnO,EAAuO,GAAvO,EAA2O,GAA3O,EAA+O,GAA/O,EAAmP,GAAnP,EAAuP,GAAvP,EAA2P,GAA3P,EAA+P,GAA/P,EAAmQ,GAAnQ,EAAuQ,GAAvQ,EAA2Q,GAA3Q,EAA+Q,GAA/Q,EAAmR,GAAnR,EAAuR,GAAvR,EAA2R,GAA3R,EAA+R,GAA/R,EAAmS,GAAnS,EAAuS,GAAvS,EAA2S,GAA3S,EAA+S,GAA/S,EAAmT,GAAnT,EAAuT,GAAvT,EAA2T,GAA3T,EAA+T,GAA/T,EAAmU,GAAnU,EAAuU,GAAvU,EAA2U,GAA3U,EAA+U,GAA/U,EAAmV,GAAnV,EAAuV,GAAvV,EAA2V,GAA3V,EAA+V,GAA/V,EAAmW,GAAnW,EAAuW,GAAvW,EAA2W,GAA3W,EAA+W,GAA/W,EAAmX,GAAnX,EAAuX,GAAvX,EAA2X,GAA3X,EAA+X,GAA/X,EAAmY,GAAnY,EAAuY,GAAvY,EAA2Y,GAA3Y,EAA+Y,GAA/Y,EAAmZ,GAAnZ,EAAuZ,GAAvZ,EAA2Z,GAA3Z,EAA+Z,GAA/Z,EAAma,GAAna,EAAua,GAAva,EAA2a,GAA3a,EAA+a,GAA/a,EAAmb,GAAnb,EAAub,GAAvb,EAA2b,GAA3b,EAA+b,GAA/b,EAAmc,GAAnc,EAAuc,GAAvc,EAA2c,GAA3c,EAA+c,GAA/c,EAAmd,GAAnd,EAAud,GAAvd,EAA2d,GAA3d,EAA+d,GAA/d,EAAme,GAAne,EAAue,GAAve,EAA2e,GAA3e,EAA+e,GAA/e,EAAmf,GAAnf,EAAuf,GAAvf,EAA2f,GAA3f,EAA+f,GAA/f,EAAmgB,GAAngB,EAAugB,GAAvgB,EAA2gB,GAA3gB,EAA+gB,GAA/gB,EAAmhB,GAAnhB,EAAuhB,GAAvhB,EAA2hB,GAA3hB,EAA+hB,GAA/hB,EAAmiB,GAAniB,EAAuiB,GAAviB,EAA2iB,GAA3iB,EAA+iB,GAA/iB,EAAmjB,GAAnjB,EAAujB,GAAvjB,EAA2jB,GAA3jB,EAA+jB,GAA/jB,EAAmkB,GAAnkB,EAAukB,GAAvkB,EAA2kB,GAA3kB,EAA+kB,GAA/kB,EAAmlB,GAAnlB,EAAulB,GAAvlB,EAA2lB,GAA3lB,EAA+lB,GAA/lB,EAAmmB,GAAnmB,EAAumB,GAAvmB,EAA2mB,GAA3mB,EAA+mB,GAA/mB,EAAmnB,GAAnnB,EAAunB,GAAvnB,EAA2nB,GAA3nB,EAA+nB,GAA/nB,CAApB;AACE,QAAIC,sBAAsB,GAAG,CAC3BtB,YAAY,CAAC,CAAD,EAAG,GAAH,CADe,EAE3BA,YAAY,CAAC,CAAD,EAAG,GAAH,CAFe,EAG3BA,YAAY,CAAC,CAAD,EAAG,GAAH,CAHe,EAI3BA,YAAY,CAAC,CAAD,EAAG,GAAH,CAJe,EAK3BA,YAAY,CAAC,CAAD,EAAG,GAAH,CALe,CAA7B;AAOA,QAAIuB,6BAA6B,GAAG,CAClCvB,YAAY,CAAC,CAAD,EAAG,GAAH,CADsB,EAElCA,YAAY,CAAC,EAAD,EAAI,GAAJ,CAFsB,EAGlCA,YAAY,CAAC,EAAD,EAAI,GAAJ,CAHsB,EAIlCA,YAAY,CAAC,EAAD,EAAI,GAAJ,CAJsB,CAApC;AAMA,QAAIwB,oBAAoB,GAAG,CACzBxB,YAAY,CAAC,CAAD,EAAG,OAAH,CADa,EAEzBA,YAAY,CAAC,CAAD,EAAG,OAAH,CAFa,EAGzBA,YAAY,CAAC,CAAD,EAAG,OAAH,CAHa,EAIzBA,YAAY,CAAC,CAAD,EAAG,OAAH,CAJa,EAKzBA,YAAY,CAAC,CAAD,EAAG,OAAH,CALa,EAMzBA,YAAY,CAAC,EAAD,EAAI,OAAJ,CANa,CAA3B,CAjBkC,CAyBpC;;AACA,QAAIyB,YAAY,GAAGb,IAAI,CAACC,KAAL,CAAWa,MAAM,CAACC,IAAP,CAAY5B,YAAZ,EAA0BW,MAA1B,GAAmCE,IAAI,CAACE,MAAL,EAA9C,CAAnB;AACA,QAAIc,MAAM,GAAG,EAAb,CA3BoC,CA4BpC;;AACA,QAAGH,YAAY,IAAI1B,YAAY,CAACH,eAAhC,EAAiD;AAC/C,UAAIiC,MAAM,GAAGjB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBM,WAA3B,CAAb;AACAU,MAAAA,KAAK,CAAE,GAAEF,MAAO,cAAaC,MAAO,EAA/B,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZ,YAAIC,QAAQ,GAAG;AACbA,UAAAA,QAAQ,eAAE,QAAC,eAAD;AAAiB,YAAA,QAAQ,EAAED,IAAI,CAACE;AAAhC;AAAA;AAAA;AAAA;AAAA,kBADG;AAEbC,UAAAA,aAAa,EAAEH,IAAI,CAACI,OAFP;AAGbC,UAAAA,OAAO,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT;AAHI,SAAf;AAKArB,QAAAA,OAAO,CAACiB,QAAD,CAAP;AACD,OATD;AAUD,KAzCmC,CA0CpC;AACA;;;AACA,QAAGV,YAAY,IAAI1B,YAAY,CAACF,cAAhC,EAAgD;AAC9C,UAAIgC,MAAM,GAAGR,aAAa,CAACT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBO,aAAa,CAACX,MAAzC,CAAD,CAA1B;AACAoB,MAAAA,KAAK,CAAE,GAAEF,MAAO,cAAaC,MAAO,EAA/B,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZ,YAAIK,OAAO,GAAG,CAACvC,YAAY,CAAC,WAAD,CAAb,EAA4BA,YAAY,CAAC,cAAD,CAAxC,CAAd,CADY,CAEZ;;AACA,YAAGkC,IAAI,CAACM,YAAL,CAAkBtC,IAAlB,IAA0B,GAA1B,IAAiCuC,MAAM,CAACP,IAAI,CAACM,YAAL,CAAkBvC,MAAnB,CAAN,IAAoC,CAAxE,EAA2E;AACzE,cAAIyC,iBAAiB,GAAGpC,aAAa,CAACgB,sBAAD,CAArC;AACA,cAAIe,aAAa,GAAGrC,YAAY,CAACkC,IAAI,CAACM,YAAL,CAAkBtC,IAAnB,EAAyBgC,IAAI,CAACM,YAAL,CAAkBvC,MAA3C,CAAhC;AACAyC,UAAAA,iBAAiB,GAAGA,iBAAiB,CAACC,MAAlB,CAA0BC,EAAD,IAAQ;AACnDC,YAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYT,aAAZ;AACA,mBAAOO,EAAE,IAAIP,aAAb;AACD,WAJmB,CAApB;AAKAE,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaG,iBAAiB,CAAC,CAAD,CAA9B;AACAH,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaG,iBAAiB,CAAC,CAAD,CAA9B;AACAH,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAavC,YAAY,CAACkC,IAAI,CAACM,YAAL,CAAkBvC,MAAnB,EAA2BiC,IAAI,CAACM,YAAL,CAAkBtC,IAA7C,CAAzB;AACAqC,UAAAA,OAAO,GAAGjC,aAAa,CAACiC,OAAD,CAAvB;AACD,SAZD,MAaK,IAAGL,IAAI,CAACM,YAAL,CAAkBtC,IAAlB,IAA0B,GAA1B,IAAiCuC,MAAM,CAACP,IAAI,CAACM,YAAL,CAAkBvC,MAAnB,CAAN,IAAoC,CAAxE,EAA2E;AAC9E,cAAIyC,iBAAiB,GAAGpC,aAAa,CAACiB,6BAAD,CAArC;AACA,cAAIc,aAAa,GAAGrC,YAAY,CAACkC,IAAI,CAACM,YAAL,CAAkBtC,IAAnB,EAAyBgC,IAAI,CAACM,YAAL,CAAkBvC,MAA3C,CAAhC;AACAyC,UAAAA,iBAAiB,GAAGA,iBAAiB,CAACC,MAAlB,CAA0BC,EAAD,IAAQ;AAAC,mBAAOA,EAAE,IAAIP,aAAb;AAA2B,WAA7D,CAApB;AACAE,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaG,iBAAiB,CAAC,CAAD,CAA9B;AACAH,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaG,iBAAiB,CAAC,CAAD,CAA9B;AACAH,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAavC,YAAY,CAACkC,IAAI,CAACM,YAAL,CAAkBvC,MAAnB,EAA2BiC,IAAI,CAACM,YAAL,CAAkBtC,IAA7C,CAAzB;AACAqC,UAAAA,OAAO,GAAGjC,aAAa,CAACiC,OAAD,CAAvB;AACD,SARI,MASA,IAAGL,IAAI,CAACM,YAAL,CAAkBtC,IAAlB,IAA0B,OAA7B,EAAsC;AACzC,cAAIwC,iBAAiB,GAAGpC,aAAa,CAACkB,oBAAD,CAArC;AACA,cAAIa,aAAa,GAAGrC,YAAY,CAACkC,IAAI,CAACM,YAAL,CAAkBvC,MAAnB,EAA2BiC,IAAI,CAACM,YAAL,CAAkBO,KAA7C,CAAhC;AACAL,UAAAA,iBAAiB,GAAGA,iBAAiB,CAACC,MAAlB,CAA0BC,EAAD,IAAQ;AAAC,mBAAOA,EAAE,IAAIP,aAAb;AAA2B,WAA7D,CAApB;AACAE,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaG,iBAAiB,CAAC,CAAD,CAA9B;AACAH,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaG,iBAAiB,CAAC,CAAD,CAA9B;AACAH,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAavC,YAAY,CAACkC,IAAI,CAACM,YAAL,CAAkBvC,MAAnB,EAA2BiC,IAAI,CAACM,YAAL,CAAkBtC,IAA7C,CAAzB;AACAqC,UAAAA,OAAO,GAAGjC,aAAa,CAACiC,OAAD,CAAvB;AACD;;AACD,YAAIJ,QAAQ,GAAG;AACbA,UAAAA,QAAQ,eAAE,QAAC,cAAD;AAAgB,YAAA,QAAQ,EAAED,IAAI,CAACE;AAA/B;AAAA;AAAA;AAAA;AAAA,kBADG;AAEbC,UAAAA,aAAa,EAAErC,YAAY,CAACkC,IAAI,CAACM,YAAL,CAAkBvC,MAAnB,EAA2BiC,IAAI,CAACM,YAAL,CAAkBtC,IAA7C,CAFd;AAGbqC,UAAAA,OAAO,EAAEA;AAHI,SAAf;AAKArB,QAAAA,OAAO,CAACiB,QAAD,CAAP;AACD,OA1CD;AA2CD;;AACD,QAAGV,YAAY,IAAI1B,YAAY,CAACD,uBAAhC,EAAyD;AACvD,UAAI+B,MAAM,GAAGjB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBM,WAA3B,CAAb;AACA,UAAI4B,UAAU,GAAG,CACf,OADe,EAEf,WAFe,EAGf,MAHe,EAIf,OAJe,EAKf,KALe,EAMf,KANe,EAOf,QAPe,EAQf,QARe,EASf,SATe,EAUf,MAVe,EAWf,UAXe,EAYf,QAZe,EAaf,QAbe,EAcf,UAde,EAef,eAfe,EAgBf,SAhBe,EAiBf,gBAjBe,EAkBf,eAlBe,EAmBf,mBAnBe,EAoBf,cApBe,EAqBf,eArBe,EAsBf,aAtBe,EAuBf,aAvBe,EAwBf,gBAxBe,EAyBf,gBAzBe,EA0Bf,iBA1Be,EA2Bf,cA3Be,EA4Bf,cA5Be,EA6Bf,gBA7Be,EA8Bf,gBA9Be,EA+Bf,kBA/Be,EAgCf,uBAhCe,EAiCf,iBAjCe,EAkCf,eAlCe,CAAjB;AAoCAlB,MAAAA,KAAK,CAAE,GAAEF,MAAO,cAAaC,MAAO,EAA/B,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZ,YAAIe,UAAU,GAAG,qBAAjB;;AACA,YAAGf,IAAI,CAACgB,MAAL,IAAehB,IAAI,CAACgB,MAAL,CAAYC,SAA9B,EAAyC;AACvCF,UAAAA,UAAU,GAAGf,IAAI,CAACgB,MAAL,CAAYC,SAAzB;AACD;;AACD,YAAIT,iBAAiB,GAAGpC,aAAa,CAAC,CAAC,GAAG0C,UAAJ,EAAgB,qBAAhB,CAAD,CAArC;AACAN,QAAAA,iBAAiB,GAAGA,iBAAiB,CAACC,MAAlB,CAA0BC,EAAD,IAAQ;AAAC,iBAAOA,EAAE,IAAIK,UAAb;AAAwB,SAA1D,CAApB;AACA,YAAIV,OAAO,GAAG,CACZU,UADY,EAEZA,UAAU,IAAI,qBAAd,GAAsCP,iBAAiB,CAAC,CAAD,CAAvD,GAA4D,qBAFhD,EAGZA,iBAAiB,CAAC,CAAD,CAHL,EAIZA,iBAAiB,CAAC,CAAD,CAJL,EAKZA,iBAAiB,CAAC,CAAD,CALL,CAAd;AAOAH,QAAAA,OAAO,GAAGjC,aAAa,CAACiC,OAAD,CAAvB;AACA,YAAIJ,QAAQ,GAAG;AACbA,UAAAA,QAAQ,eAAE,QAAC,uBAAD;AAAyB,YAAA,QAAQ,EAAED,IAAI,CAACE;AAAxC;AAAA;AAAA;AAAA;AAAA,kBADG;AAEbC,UAAAA,aAAa,EAAEY,UAFF;AAGbV,UAAAA,OAAO,EAAEA;AAHI,SAAf;AAKArB,QAAAA,OAAO,CAACiB,QAAD,CAAP;AACD,OAvBD;AAwBD;AACF,GAzJI,CAAP;AA0JH;;AACD,eAAeiB,yBAAf,CAAyCC,cAAzC,EAAyD;AACvD,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAI,IAAI7C,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG4C,cAAnB,EAAmC5C,CAAC,EAApC,EAAwC;AACtC,QAAI0B,QAAQ,GAAG,MAAMnB,gBAAgB,EAArC;AACAsC,IAAAA,SAAS,CAACC,IAAV,CAAepB,QAAf;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACD;;AACD,SAAOmB,SAAP;AACD;;AAED,SAAQtC,gBAAR,EAA0BoC,yBAA1B","sourcesContent":["import React from \"react\";\nimport {QualityQuestion, ChargeQuestion, CharacterUnlockQuestion} from \"./Questions/questions\";\nimport QuestionType from \"./enum\";\n\n// Charge question answer formatting\nfunction ChargeAnswer(amount, unit = \"\") {\n  let answer = `${amount} ${unit}`;\n  answer = answer[0].toUpperCase() + answer.slice(1);\n  return answer;\n}\nfunction shuffledArray(array) {\n  let newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = newArray[i];\n      newArray[i] = newArray[j];\n      newArray[j] = temp;\n  }\n  return newArray;\n}\n\nfunction generateQuestion() {\n    return new Promise((resolve, reject) => {\n        // 718 items as of now\n        let itemsAmount = 718\n        let activeItemIds = [33,34,35,36,37,38,39,40,41,42,44,45,47,49,56,58,65,66,77,78,83,84,85,86,93,97,102,105,107,111,123,124,126,127,130,133,135,136,137,145,146,158,160,164,166,171,175,177,181,186,192,282,283,284,285,287,288,289,290,291,292,293,294,295,296,297,298,323,324,325,326,338,347,348,349,351,352,357,382,383,386,396,406,419,422,427,434,437,439,441,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,504,507,508,510,512,515,516,521,522,523,527,536,540,545,549,550,552,555,556,557,577,578,580,584,585,604,605,609,611,622,623,625,628,631,635,636,639,640,642,650,653,655,685,687,703,705,706,709,710,711,712,713,714,715,719,720,722,723,728,729];\n          let possibleAnswersSeconds = [\n            ChargeAnswer(1,\"s\"),\n            ChargeAnswer(2,\"s\"),\n            ChargeAnswer(3,\"s\"),\n            ChargeAnswer(4,\"s\"),\n            ChargeAnswer(6,\"s\")\n          ];\n          let possibleAnswersSecondsSpecial = [\n            ChargeAnswer(7,\"s\"),\n            ChargeAnswer(10,\"s\"),\n            ChargeAnswer(15,\"s\"),\n            ChargeAnswer(16,\"s\"),\n          ];\n          let possibleAnswersRooms = [\n            ChargeAnswer(1,\"rooms\"),\n            ChargeAnswer(2,\"rooms\"),\n            ChargeAnswer(3,\"rooms\"),\n            ChargeAnswer(4,\"rooms\"),\n            ChargeAnswer(6,\"rooms\"),\n            ChargeAnswer(12,\"rooms\"),\n          ];\n        // Get random question type\n        let questionType = Math.floor(Object.keys(QuestionType).length * Math.random())\n        let apiUrl = \"\"\n        // Quality Questions\n        if(questionType == QuestionType.QualityQuestion) {\n          let itemId = Math.floor(Math.random() * itemsAmount);\n          fetch(`${apiUrl}/api/items/${itemId}`)\n          .then(response => response.json())\n          .then(data => {\n            let question = {\n              question: <QualityQuestion itemName={data.name}></QualityQuestion>,\n              correctAnswer: data.quality,\n              answers: [0,1,2,3,4]\n            }\n            resolve(question);\n          });\n        }\n        // Charge Questions\n        // TO BE REFACTORISED, THE CODE IS AWFUL RIGHT NOW\n        if(questionType == QuestionType.ChargeQuestion) {\n          let itemId = activeItemIds[Math.floor(Math.random() * activeItemIds.length)]\n          fetch(`${apiUrl}/api/items/${itemId}`)\n          .then(response => response.json())\n          .then(data => {\n            let answers = [ChargeAnswer(\"unlimited\"), ChargeAnswer(\"one time use\")]\n            // Randomise different sets of answers based on the correct answer type\n            if(data.rechargeTime.unit == \"s\" && Number(data.rechargeTime.amount) <= 6) {\n              let additionalAnswers = shuffledArray(possibleAnswersSeconds);\n              let correctAnswer = ChargeAnswer(data.rechargeTime.unit, data.rechargeTime.amount);\n              additionalAnswers = additionalAnswers.filter((el) => {\n                console.log(el)\n                console.log(correctAnswer)\n                return el != correctAnswer\n              })\n              answers[2] = additionalAnswers[0];\n              answers[3] = additionalAnswers[1];\n              answers[4] = ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit);\n              answers = shuffledArray(answers);\n            }\n            else if(data.rechargeTime.unit == \"s\" && Number(data.rechargeTime.amount) >= 7) {\n              let additionalAnswers = shuffledArray(possibleAnswersSecondsSpecial);\n              let correctAnswer = ChargeAnswer(data.rechargeTime.unit, data.rechargeTime.amount);\n              additionalAnswers = additionalAnswers.filter((el) => {return el != correctAnswer})\n              answers[2] = additionalAnswers[0];\n              answers[3] = additionalAnswers[1];\n              answers[4] = ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit);\n              answers = shuffledArray(answers);\n            }\n            else if(data.rechargeTime.unit == \"rooms\") {\n              let additionalAnswers = shuffledArray(possibleAnswersRooms);\n              let correctAnswer = ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.rooms);\n              additionalAnswers = additionalAnswers.filter((el) => {return el != correctAnswer})\n              answers[2] = additionalAnswers[0];\n              answers[3] = additionalAnswers[1];\n              answers[4] = ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit);\n              answers = shuffledArray(answers);\n            }\n            let question = {\n              question: <ChargeQuestion itemName={data.name}></ChargeQuestion>,\n              correctAnswer: ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit),\n              answers: answers\n            }\n            resolve(question);\n          });\n        }\n        if(questionType == QuestionType.CharacterUnlockQuestion) {\n          let itemId = Math.floor(Math.random() * itemsAmount);\n          let characters = [\n            \"Isaac\",\n            \"Magdalene\",\n            \"Cain\",\n            \"Judas\",\n            \"???\",\n            \"Eve\",\n            \"Samson\",\n            \"Azazel\",\n            \"Lazarus\",\n            \"Eden\",\n            \"The Lost\",\n            \"Lilith\",\n            \"Keeper\",\n            \"Apollyon\",\n            \"The Forgotten\",\n            \"Bethany\",\n            \"Jacob and Esau\",\n            \"Tainted Isaac\",\n            \"Tainted Magdalene\",\n            \"Tainted Cain\",\n            \"Tainted Judas\",\n            \"Tainted ???\",\n            \"Tainted Eve\",\n            \"Tainted Samson\",\n            \"Tainted Azazel\",\n            \"Tainted Lazarus\",\n            \"Tainted Eden\",\n            \"Tainted Lost\",\n            \"Tainted Lilith\",\n            \"Tainted Keeper\",\n            \"Tainted Apollyon\",\n            \"Tainted The Forgotten\",\n            \"Tainted Bethany\",\n            \"Tainted Jacob\",\n          ];\n          fetch(`${apiUrl}/api/items/${itemId}`)\n          .then(response => response.json())\n          .then(data => {\n            let unlockedBy = \"Unlocked By Default\";\n            if(data.unlock && data.unlock.character) {\n              unlockedBy = data.unlock.character\n            }\n            let additionalAnswers = shuffledArray([...characters, \"Unlocked By Default\"]);\n            additionalAnswers = additionalAnswers.filter((el) => {return el != unlockedBy})\n            let answers = [\n              unlockedBy,\n              unlockedBy == \"Unlocked By Default\" ? additionalAnswers[0]: \"Unlocked By Default\",\n              additionalAnswers[1],\n              additionalAnswers[2],\n              additionalAnswers[3]\n            ]\n            answers = shuffledArray(answers);\n            let question = {\n              question: <CharacterUnlockQuestion itemName={data.name}></CharacterUnlockQuestion>,\n              correctAnswer: unlockedBy,\n              answers: answers\n            }\n            resolve(question);\n          });\n        }\n      })\n}\nasync function generateMultipleQuestions(questionAmount) {\n  let questions = []\n  for(let i = 0; i < questionAmount; i++) {\n    let question = await generateQuestion()\n    questions.push(question)\n    console.log(question);\n  }\n  return questions;\n}\n\nexport {generateQuestion, generateMultipleQuestions};"]},"metadata":{},"sourceType":"module"}