{"ast":null,"code":"var _jsxFileName = \"/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/Quiz.js\";\nimport React, { Component } from 'react';\nimport { QualityQuestion } from './Questions/questionsComponents.js';\nimport QualityQuestionData from './quizData.js';\nimport QuestionType from './enum.js';\nimport { generateQuestion, generateMultipleQuestions } from './generateQuestion.js';\nimport Answers from './Answers.js';\nimport StartView from '../StartView.js';\nimport Summary from '../Summary/Summary.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Quiz extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quizStarted: false,\n      currentQuestion: 0,\n      questions: [],\n      loading: false\n    };\n    this.startFunc = this.startFunc.bind(this);\n    this.answer = this.answer.bind(this);\n    this.endQuiz = this.endQuiz.bind(this);\n  }\n\n  startFunc() {\n    // Start the loading animation\n    this.setState({\n      loading: true\n    }); // Generate the questions\n\n    generateMultipleQuestions(15).then(questions => {\n      console.log(questions);\n      this.setState({\n        loading: false,\n        quizStarted: true,\n        quizFinished: false,\n        questions: questions\n      });\n      console.log(this.state.questions);\n    });\n  }\n\n  answer(correct) {\n    if (correct) {\n      // Add an answered correctly flag to the current question\n      let newQuestions = [...this.state.questions];\n      newQuestions[this.state.currentQuestion].answeredCorrectly = true;\n      this.setState({\n        questions: newQuestions\n      });\n    } // Move to the next question, fade out and in\n    // Similiar function in Answers Component\n\n\n    const fadeDelay = 500;\n    const totalDelay = fadeDelay + 700;\n    document.getElementById(\"quiz\").style.pointerEvents = \"none\";\n    setTimeout(() => {\n      document.getElementById(\"quiz\").style.opacity = 0;\n    }, fadeDelay);\n    setTimeout(() => {\n      if (!this.state.questions[this.state.currentQuestion + 1]) {\n        this.endQuiz();\n      } else {\n        this.setState({\n          currentQuestion: this.state.currentQuestion + 1\n        });\n      }\n\n      document.getElementById(\"quiz\").style.opacity = \"100%\";\n    }, totalDelay);\n  }\n\n  endQuiz() {\n    this.setState({\n      quizStarted: false,\n      quizFinished: true\n    }); // The array that contains objects with a question type, the number of correct answers from that type and total answers from that type \n\n    let summary = [];\n    console.log(this.state.questions);\n    this.state.questions.forEach(question => {\n      // question.question is the component with the formatted question\n      console.log(question.question);\n      let questionType = question.question.type.name;\n      let summaryIndex = null; // Get the summary entry object with the matching question type\n\n      summary.forEach((question, i) => {\n        if (question.questionType == questionType) summaryIndex = i;\n      }); // Apply changes to summary\n\n      if (summaryIndex !== null) {\n        if (question.answeredCorrectly) summary[summaryIndex].correctAnswers += 1;\n        summary[summaryIndex].totalAnswers += 1;\n      } else {\n        let correctAnswers = 0;\n        if (question.answeredCorrectly) correctAnswers = 1;\n        let summaryObject = {\n          questionType: questionType,\n          correctAnswers: correctAnswers,\n          totalAnswers: 1\n        };\n        summary.push(summaryObject);\n      }\n\n      console.log(summary);\n    }); // Change the questionType properties to more readable ones for displaying in the summary\n\n    summary.forEach(el => {\n      el.questionType = el.questionType.replace(/([A-Z])/g, ' $1').trim();\n    });\n    this.setState({\n      summary: summary,\n      questions: [],\n      currentQuestion: 0\n    });\n  }\n\n  render() {\n    let currentQuestion = { ...this.state.questions[this.state.currentQuestion]\n    };\n    console.log(this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quiz\",\n      children: [this.state.quizStarted && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [currentQuestion.question, /*#__PURE__*/_jsxDEV(Answers, {\n          answers: currentQuestion.answers,\n          correctAnswer: currentQuestion.correctAnswer,\n          answerFunc: this.answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true), !this.state.quizStarted && !this.state.summary && /*#__PURE__*/_jsxDEV(StartView, {\n        startFunc: this.startFunc,\n        loading: this.state.loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }, this), this.state.summary && /*#__PURE__*/_jsxDEV(Summary, {\n        summary: this.state.summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/Quiz.js"],"names":["React","Component","QualityQuestion","QualityQuestionData","QuestionType","generateQuestion","generateMultipleQuestions","Answers","StartView","Summary","Quiz","constructor","props","state","quizStarted","currentQuestion","questions","loading","startFunc","bind","answer","endQuiz","setState","then","console","log","quizFinished","correct","newQuestions","answeredCorrectly","fadeDelay","totalDelay","document","getElementById","style","pointerEvents","setTimeout","opacity","summary","forEach","question","questionType","type","name","summaryIndex","i","correctAnswers","totalAnswers","summaryObject","push","el","replace","trim","render","answers","correctAnswer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {QualityQuestion} from './Questions/questionsComponents.js';\nimport QualityQuestionData from './quizData.js';\nimport QuestionType from './enum.js';\nimport {generateQuestion, generateMultipleQuestions} from './generateQuestion.js';\nimport Answers from './Answers.js';\nimport StartView from '../StartView.js';\nimport Summary from '../Summary/Summary.js';\n\nexport default class Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quizStarted: false,\n      currentQuestion: 0,\n      questions: [],\n      loading: false\n    };\n    \n    this.startFunc = this.startFunc.bind(this);\n    this.answer = this.answer.bind(this);\n    this.endQuiz = this.endQuiz.bind(this);\n    \n  }\n  startFunc() {\n    // Start the loading animation\n    this.setState({loading: true});\n    // Generate the questions\n    generateMultipleQuestions(15).then(questions => {\n      console.log(questions)\n      this.setState({\n        loading: false,\n        quizStarted: true,\n        quizFinished: false,\n        questions: questions\n      })\n      console.log(this.state.questions)\n    })\n  }\n  answer(correct) {\n    if(correct) {\n      // Add an answered correctly flag to the current question\n        let newQuestions = [...this.state.questions];\n        newQuestions[this.state.currentQuestion].answeredCorrectly = true;\n        this.setState({\n          questions: newQuestions\n        })\n    }\n  // Move to the next question, fade out and in\n  // Similiar function in Answers Component\n  const fadeDelay = 500;\n  const totalDelay = fadeDelay + 700;\n  document.getElementById(\"quiz\").style.pointerEvents = \"none\";\n    setTimeout(() => {\n      document.getElementById(\"quiz\").style.opacity = 0;\n    }, fadeDelay);\n    \n    setTimeout(() => {\n      if(!this.state.questions[this.state.currentQuestion + 1]) {\n        this.endQuiz();\n      }\n      else {\n        this.setState({\n          currentQuestion: this.state.currentQuestion + 1\n        });\n      }\n      document.getElementById(\"quiz\").style.opacity = \"100%\";\n      \n    }, totalDelay)\n    \n  }\n  endQuiz() {\n    this.setState({\n      quizStarted: false,\n      quizFinished: true\n    });\n    // The array that contains objects with a question type, the number of correct answers from that type and total answers from that type \n    let summary = [];\n\n    console.log(this.state.questions);\n    this.state.questions.forEach((question) => {\n      // question.question is the component with the formatted question\n      console.log(question.question);\n      let questionType = question.question.type.name;\n      let summaryIndex = null;\n      // Get the summary entry object with the matching question type\n      summary.forEach((question,i) => {\n        if(question.questionType == questionType) summaryIndex = i;\n      });\n\n      // Apply changes to summary\n      if(summaryIndex !== null) {\n        if(question.answeredCorrectly) summary[summaryIndex].correctAnswers += 1;\n        summary[summaryIndex].totalAnswers += 1;\n      }\n      else {\n        let correctAnswers = 0;\n        if(question.answeredCorrectly) correctAnswers = 1;\n        let summaryObject = {\n          questionType: questionType,\n          correctAnswers: correctAnswers,\n          totalAnswers: 1\n        };\n        summary.push(summaryObject)\n      }\n      console.log(summary);\n      \n    })\n    \n    // Change the questionType properties to more readable ones for displaying in the summary\n    summary.forEach((el) => {\n      el.questionType = el.questionType.replace(/([A-Z])/g, ' $1').trim();\n    })\n    this.setState({\n      summary: summary,\n      questions: [],\n      currentQuestion: 0\n    })\n  }\n  render() {\n    let currentQuestion = {...this.state.questions[this.state.currentQuestion]};\n    console.log(this.state)\n    return (\n      <div id=\"quiz\">\n      {\n      (this.state.quizStarted) &&\n      <>\n        {currentQuestion.question}\n        <Answers \n        answers={currentQuestion.answers}\n        correctAnswer={currentQuestion.correctAnswer}\n        answerFunc={this.answer}\n        ></Answers>\n      </>\n      }\n      {\n      (!this.state.quizStarted && !this.state.summary) &&\n      <StartView\n        startFunc={this.startFunc}\n        loading={this.state.loading}\n      ></StartView>\n      }\n\n      {this.state.summary && <Summary summary={this.state.summary}></Summary>}\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}