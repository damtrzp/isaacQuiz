[{"/home/programowanie/isaacQuiz/isaac-quiz/src/index.js":"1","/home/programowanie/isaacQuiz/isaac-quiz/src/App.js":"2","/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/Quiz.js":"3","/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/enum.js":"4","/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/quizData.js":"5","/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/generateQuestion.js":"6","/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/Answers.js":"7","/home/programowanie/isaacQuiz/isaac-quiz/src/StartView.js":"8","/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/Questions/questionsComponents.js":"9","/home/programowanie/isaacQuiz/isaac-quiz/src/LoadingWheel/LoadingWheel.js":"10","/home/programowanie/isaacQuiz/isaac-quiz/src/Summary/Summary.js":"11","/home/programowanie/isaacQuiz/isaac-quiz/src/Summary/SummarySection.js":"12"},{"size":177,"mtime":1644788680743,"results":"13","hashOfConfig":"14"},{"size":255,"mtime":1645732584537,"results":"15","hashOfConfig":"14"},{"size":4512,"mtime":1650913957435,"results":"16","hashOfConfig":"14"},{"size":162,"mtime":1645663946519,"results":"17","hashOfConfig":"14"},{"size":175,"mtime":1644790081863,"results":"18","hashOfConfig":"14"},{"size":9012,"mtime":1650800262071,"results":"19","hashOfConfig":"14"},{"size":2330,"mtime":1645670035559,"results":"20","hashOfConfig":"14"},{"size":1496,"mtime":1650728454028,"results":"21","hashOfConfig":"14"},{"size":1494,"mtime":1645737310437,"results":"22","hashOfConfig":"14"},{"size":250,"mtime":1645667583749,"results":"23","hashOfConfig":"14"},{"size":591,"mtime":1646098678924,"results":"24","hashOfConfig":"14"},{"size":803,"mtime":1646177131015,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"4o0oae",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"29"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"29"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"29"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/home/programowanie/isaacQuiz/isaac-quiz/src/index.js",[],[],[],"/home/programowanie/isaacQuiz/isaac-quiz/src/App.js",[],[],"/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/Quiz.js",["67","68","69","70","71"],[],"import React, { Component } from 'react'\nimport {QualityQuestion} from './Questions/questionsComponents.js';\nimport QualityQuestionData from './quizData.js';\nimport QuestionType from './enum.js';\nimport {generateQuestion, generateMultipleQuestions} from './generateQuestion.js';\nimport Answers from './Answers.js';\nimport StartView from '../StartView.js';\nimport Summary from '../Summary/Summary.js';\n\nexport default class Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quizStarted: false,\n      currentQuestion: 0,\n      questions: [],\n      loading: false\n    };\n    \n    this.startFunc = this.startFunc.bind(this);\n    this.answer = this.answer.bind(this);\n    this.endQuiz = this.endQuiz.bind(this);\n    \n  }\n  startFunc(questionsAmount = 15) {\n    // Start the loading animation\n    this.setState({loading: true});\n    // Generate the questions\n    generateMultipleQuestions(questionsAmount).then(questions => {\n      console.log(questions)\n      this.setState({\n        loading: false,\n        quizStarted: true,\n        quizFinished: false,\n        questions: questions\n      })\n      console.log(this.state.questions)\n    })\n  }\n  answer(correct) {\n    if(correct) {\n      // Add an answered correctly flag to the current question\n        let newQuestions = [...this.state.questions];\n        newQuestions[this.state.currentQuestion].answeredCorrectly = true;\n        this.setState({\n          questions: newQuestions\n        })\n    }\n  // Move to the next question, fade out and in\n  // Similiar function in Answers Component\n  const fadeDelay = 500;\n  const totalDelay = fadeDelay + 700;\n  document.getElementById(\"quiz\").style.pointerEvents = \"none\";\n    setTimeout(() => {\n      document.getElementById(\"quiz\").style.opacity = 0;\n    }, fadeDelay);\n    \n    setTimeout(() => {\n      if(!this.state.questions[this.state.currentQuestion + 1]) {\n        this.endQuiz();\n      }\n      else {\n        this.setState({\n          currentQuestion: this.state.currentQuestion + 1\n        });\n      }\n      document.getElementById(\"quiz\").style.opacity = \"100%\";\n      document.getElementById(\"quiz\").style.pointerEvents = \"auto\";\n      \n    }, totalDelay)\n    \n  }\n  endQuiz() {\n    this.setState({\n      quizStarted: false,\n      quizFinished: true\n    });\n    // The array that contains objects with a question type, the number of correct answers from that type and total answers from that type \n    let summary = [];\n\n    console.log(this.state.questions);\n    this.state.questions.forEach((question) => {\n      // question.question is the component with the formatted question\n      console.log(question.question);\n      let questionType = question.question.type.name;\n      let summaryIndex = null;\n      // Get the summary entry object with the matching question type\n      summary.forEach((question,i) => {\n        if(question.questionType == questionType) summaryIndex = i;\n      });\n\n      // Apply changes to summary\n      if(summaryIndex !== null) {\n        if(question.answeredCorrectly) summary[summaryIndex].correctAnswers += 1;\n        summary[summaryIndex].totalAnswers += 1;\n      }\n      else {\n        let correctAnswers = 0;\n        if(question.answeredCorrectly) correctAnswers = 1;\n        let summaryObject = {\n          questionType: questionType,\n          correctAnswers: correctAnswers,\n          totalAnswers: 1\n        };\n        summary.push(summaryObject)\n      }\n      console.log(summary);\n      \n    })\n    \n    // Change the questionType properties to more readable ones for displaying in the summary\n    summary.forEach((el) => {\n      el.questionType = el.questionType.replace(/([A-Z])/g, ' $1').trim();\n    })\n    this.setState({\n      summary: summary,\n      questions: [],\n      currentQuestion: 0\n    })\n  }\n  render() {\n    let currentQuestion = {...this.state.questions[this.state.currentQuestion]};\n    console.log(this.state)\n    return (\n      <div id=\"quiz\">\n      {\n      (this.state.quizStarted) &&\n      <>\n        {currentQuestion.question}\n        <Answers \n        answers={currentQuestion.answers}\n        correctAnswer={currentQuestion.correctAnswer}\n        answerFunc={this.answer}\n        ></Answers>\n      </>\n      }\n      {\n      (!this.state.quizStarted && !this.state.summary) &&\n      <StartView\n        startFunc={this.startFunc}\n        loading={this.state.loading}\n      ></StartView>\n      }\n\n      {this.state.summary && <Summary summary={this.state.summary}></Summary>}\n      </div>\n    )\n  }\n}\n","/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/enum.js",[],[],"/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/quizData.js",[],[],"/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/generateQuestion.js",["72","73","74","75","76","77","78","79","80","81","82","83"],[],"import React from \"react\";\nimport {QualityQuestion, ChargeQuestion, CharacterUnlockQuestion, ItemDescriptionQuestion} from \"./Questions/questionsComponents\";\nimport QuestionType from \"./enum\";\n\n// Charge question answer formatting\nfunction ChargeAnswer(amount, unit = \"\") {\n  let answer = `${amount} ${unit}`;\n  answer = answer[0].toUpperCase() + answer.slice(1);\n  return answer;\n}\nfunction shuffledArray(array) {\n  let newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = newArray[i];\n      newArray[i] = newArray[j];\n      newArray[j] = temp;\n  }\n  return newArray;\n}\n\nlet items;\nlet apiUrl = \"https://www.platynowy-bog.com.pl\"\nfetch(`${apiUrl}/api/items`)\n.then(response => response.json())\n.then(data => {\n      items = data;\n    }\n);\n\nfunction generateQuestion() {\n    return new Promise((resolve, reject) => {\n        // 718 items as of now\n        let itemsAmount = 718\n        let activeItemIds = [33,34,35,36,37,38,39,40,41,42,44,45,47,49,56,58,65,66,77,78,83,84,85,86,93,97,102,105,107,111,123,124,126,127,130,133,135,136,137,145,146,158,160,164,166,171,175,177,181,186,192,282,283,284,285,287,288,289,290,291,292,293,294,295,296,297,298,323,324,325,326,338,347,348,349,351,352,357,382,383,386,396,406,419,422,427,434,437,439,441,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,504,507,508,510,512,515,516,521,522,523,527,536,540,545,549,550,552,555,556,557,577,578,580,584,585,604,605,609,611,622,623,625,628,631,635,636,639,640,642,650,653,655,685,687,703,705,706,709,710,711,712,713,714,715,719,720,722,723,728,729];\n          let possibleAnswersSeconds = [\n            ChargeAnswer(1,\"s\"),\n            ChargeAnswer(2,\"s\"),\n            ChargeAnswer(3,\"s\"),\n            ChargeAnswer(4,\"s\"),\n            ChargeAnswer(6,\"s\")\n          ];\n          let possibleAnswersSecondsSpecial = [\n            ChargeAnswer(7,\"s\"),\n            ChargeAnswer(10,\"s\"),\n            ChargeAnswer(15,\"s\"),\n            ChargeAnswer(16,\"s\"),\n          ];\n          let possibleAnswersRooms = [\n            ChargeAnswer(1,\"rooms\"),\n            ChargeAnswer(2,\"rooms\"),\n            ChargeAnswer(3,\"rooms\"),\n            ChargeAnswer(4,\"rooms\"),\n            ChargeAnswer(6,\"rooms\"),\n            ChargeAnswer(12,\"rooms\"),\n          ];\n        // Get random question type\n        let questionType = Math.floor(Object.keys(QuestionType).length * Math.random())\n        \n        // Quality Questions\n        if(questionType == QuestionType.QualityQuestion) {\n          let itemId = Math.floor(Math.random() * itemsAmount);\n          let itemName = items[itemId].name;\n          let itemQuality = items[itemId].quality\n            let question = {\n              question: <QualityQuestion itemName={itemName}></QualityQuestion>,\n              correctAnswer: itemQuality,\n              answers: [0,1,2,3,4]\n            }\n            resolve(question);\n        }\n        // Charge Questions\n        // TO BE REFACTORISED, THE CODE IS AWFUL RIGHT NOW\n        if(questionType == QuestionType.ChargeQuestion) {\n          let itemId = activeItemIds[Math.floor(Math.random() * activeItemIds.length)]\n          fetch(`${apiUrl}/api/items/${itemId}`)\n          .then(response => response.json())\n          .then(data => {\n            let answers = [ChargeAnswer(\"unlimited\"), ChargeAnswer(\"one time use\")]\n            // Randomise different sets of answers based on the correct answer type\n            if(data.rechargeTime.unit == \"s\" && Number(data.rechargeTime.amount) <= 6) {\n              let additionalAnswers = shuffledArray(possibleAnswersSeconds);\n              let correctAnswer = ChargeAnswer(data.rechargeTime.unit, data.rechargeTime.amount);\n              additionalAnswers = additionalAnswers.filter((el) => {\n                return el != correctAnswer\n              })\n              answers[2] = additionalAnswers[0];\n              answers[3] = additionalAnswers[1];\n              answers[4] = ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit);\n              answers = shuffledArray(answers);\n            }\n            else if(data.rechargeTime.unit == \"s\" && Number(data.rechargeTime.amount) >= 7) {\n              let additionalAnswers = shuffledArray(possibleAnswersSecondsSpecial);\n              let correctAnswer = ChargeAnswer(data.rechargeTime.unit, data.rechargeTime.amount);\n              additionalAnswers = additionalAnswers.filter((el) => {return el != correctAnswer})\n              answers[2] = additionalAnswers[0];\n              answers[3] = additionalAnswers[1];\n              answers[4] = ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit);\n              answers = shuffledArray(answers);\n            }\n            else if(data.rechargeTime.unit == \"rooms\") {\n              let correctAnswer = ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit);\n              let additionalAnswers = shuffledArray(possibleAnswersRooms);\n              additionalAnswers = additionalAnswers.filter((el) => {return el != correctAnswer})\n              answers[2] = additionalAnswers[0];\n              answers[3] = additionalAnswers[1];\n              answers[4] = correctAnswer;\n              answers = shuffledArray(answers);\n            }\n            else {\n              let additionalAnswers = shuffledArray(possibleAnswersRooms);\n              answers[2] = additionalAnswers[0];\n              answers[3] = additionalAnswers[1];\n              answers[4] = additionalAnswers[2];\n              answers = shuffledArray(answers);\n            }\n            let question = {\n              question: <ChargeQuestion itemName={data.name}></ChargeQuestion>,\n              correctAnswer: ChargeAnswer(data.rechargeTime.amount, data.rechargeTime.unit),\n              answers: answers\n            }\n            resolve(question);\n          });\n        }\n        if(questionType == QuestionType.CharacterUnlockQuestion) {\n          let itemId = Math.floor(Math.random() * itemsAmount);\n          let characters = [\n            \"Isaac\",\n            \"Magdalene\",\n            \"Cain\",\n            \"Judas\",\n            \"???\",\n            \"Eve\",\n            \"Samson\",\n            \"Azazel\",\n            \"Lazarus\",\n            \"Eden\",\n            \"The Lost\",\n            \"Lilith\",\n            \"Keeper\",\n            \"Apollyon\",\n            \"The Forgotten\",\n            \"Bethany\",\n            \"Jacob and Esau\",\n            \"Tainted Isaac\",\n            \"Tainted Magdalene\",\n            \"Tainted Cain\",\n            \"Tainted Judas\",\n            \"Tainted ???\",\n            \"Tainted Eve\",\n            \"Tainted Samson\",\n            \"Tainted Azazel\",\n            \"Tainted Lazarus\",\n            \"Tainted Eden\",\n            \"Tainted Lost\",\n            \"Tainted Lilith\",\n            \"Tainted Keeper\",\n            \"Tainted Apollyon\",\n            \"Tainted Forgotten\",\n            \"Tainted Bethany\",\n            \"Tainted Jacob\",\n          ];\n          let properItemFound = false;\n          let correctAnswer;\n          let itemName;\n          while(!properItemFound) {\n            let checkedItem = items[Math.floor(Math.random() * itemsAmount)];\n            if(checkedItem.unlock && checkedItem.unlock.character) {\n              properItemFound = true;\n              correctAnswer = checkedItem.unlock.character;\n              itemName = checkedItem.name;\n            }\n          }\n          let charactersWithoutCorrect = characters.filter(el => {return el != correctAnswer});\n          charactersWithoutCorrect = shuffledArray(charactersWithoutCorrect);\n          let answers = [\n            correctAnswer,\n            charactersWithoutCorrect[0],\n            charactersWithoutCorrect[1],\n            charactersWithoutCorrect[2],\n            charactersWithoutCorrect[3],\n          ]\n          answers = shuffledArray(answers);\n            let question = {\n              question: <CharacterUnlockQuestion itemName={itemName}></CharacterUnlockQuestion>,\n              correctAnswer: correctAnswer,\n              answers: answers\n            }\n            resolve(question);\n        }\n        if(questionType == QuestionType.ItemDescriptionQuestion) {\n          let answers = [];\n          let itemName;\n          while(answers.length < 5) {\n            let item = items[Math.floor(Math.random() * itemsAmount)];\n            answers.push(item.quote);\n            itemName = item.name;\n          }\n          let correctAnswer = answers[4];\n          answers = shuffledArray(answers);\n\n          let question = {\n            question: <ItemDescriptionQuestion itemName={itemName}></ItemDescriptionQuestion>,\n            correctAnswer: correctAnswer,\n            answers: answers\n          }\n          resolve(question);\n        }\n      })\n}\nasync function generateMultipleQuestions(questionAmount) {\n  let questions = []\n  for(let i = 0; i < questionAmount; i++) {\n    let question = await generateQuestion()\n    questions.push(question)\n  }\n  return questions;\n}\n\nexport {generateQuestion, generateMultipleQuestions};","/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/Answers.js",["84","85","86","87","88","89","90"],[],"import React, { Component } from 'react'\n\nexport default class Answers extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {}\n        this.answer = this.answer.bind(this);\n        this.props.answers.forEach((el, i) => {\n            if(el == this.props.correctAnswer) this.state.correctAnswerIndex = i;\n        });\n    }\n    // Checks if the answer is correct, colors the wrong and correct answers by referencing them by their index in the array/map\n    answer(selectedAns, index) {\n        // Set the correct answer index\n        this.props.answers.forEach((el, i) => {\n            if(el == this.props.correctAnswer) this.state.correctAnswerIndex = i;\n        });\n        // Color the correct and wrong answer\n        if(selectedAns == this.props.correctAnswer) {\n            this.setState({\n                correctSelectedIndex: this.state.correctAnswerIndex\n            })\n            this.props.answerFunc(true);\n        }\n        else {\n            this.setState({\n                wrongSelectedIndex: index,\n                correctSelectedIndex: this.state.correctAnswerIndex\n            })\n            this.props.answerFunc(false);\n        }\n        // Reset the coloring after the fade out\n        setTimeout(() => {\n            this.setState({\n                wrongSelectedIndex: null,\n                correctSelectedIndex: null\n            })\n        }, 700)\n    }\n    render() {\n        let answers = this.props.answers.map((el, i) => {\n            let className = \"\";\n            if(this.state.correctSelectedIndex == i)\n                className = \"correct\"\n            if(this.state.wrongSelectedIndex == i)\n                className = \"wrong\"\n        \n            return (\n                <button\n                key={el}\n                onClick={() => this.answer(el, i)}\n                className={`${className} answerButton` }\n                >{el}</button>\n            )\n        })\n        return (\n            <div id=\"answers\">\n                <div>\n                    {answers[0]}\n                    {answers[1]}\n                </div>\n                <div>\n                    {answers[2]}\n                    {answers[3]}\n                </div>\n                <div>\n                    {[...answers.splice(4)]}\n                </div>\n            </div>\n        )\n  }\n}\n","/home/programowanie/isaacQuiz/isaac-quiz/src/StartView.js",[],[],"/home/programowanie/isaacQuiz/isaac-quiz/src/Quiz/Questions/questionsComponents.js",[],[],"/home/programowanie/isaacQuiz/isaac-quiz/src/LoadingWheel/LoadingWheel.js",[],[],"/home/programowanie/isaacQuiz/isaac-quiz/src/Summary/Summary.js",["91"],[],"import React, { Component } from 'react'\nimport SummarySection from './SummarySection';\n\nexport default class Summary extends Component {\n    constructor(props) {\n        super(props);\n    }\n  render() {\n    return (\n      <div id=\"summary\">\n        <header>Summary</header>\n        \n        {this.props.summary.map((el) => {\n          return (\n            <SummarySection\n            label={el.questionType}\n            correctAnswers={el.correctAnswers}\n            totalAnswers={el.totalAnswers}\n            ></SummarySection>\n          )\n        })}\n\n        \n        </div>\n    )\n  }\n}\n","/home/programowanie/isaacQuiz/isaac-quiz/src/Summary/SummarySection.js",[],[],{"ruleId":"92","severity":1,"message":"93","line":2,"column":9,"nodeType":"94","messageId":"95","endLine":2,"endColumn":24},{"ruleId":"92","severity":1,"message":"96","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":27},{"ruleId":"92","severity":1,"message":"97","line":4,"column":8,"nodeType":"94","messageId":"95","endLine":4,"endColumn":20},{"ruleId":"92","severity":1,"message":"98","line":5,"column":9,"nodeType":"94","messageId":"95","endLine":5,"endColumn":25},{"ruleId":"99","severity":1,"message":"100","line":90,"column":34,"nodeType":"101","messageId":"102","endLine":90,"endColumn":36},{"ruleId":"99","severity":1,"message":"100","line":61,"column":25,"nodeType":"101","messageId":"102","endLine":61,"endColumn":27},{"ruleId":"99","severity":1,"message":"100","line":74,"column":25,"nodeType":"101","messageId":"102","endLine":74,"endColumn":27},{"ruleId":"99","severity":1,"message":"100","line":81,"column":39,"nodeType":"101","messageId":"102","endLine":81,"endColumn":41},{"ruleId":"99","severity":1,"message":"103","line":85,"column":27,"nodeType":"101","messageId":"102","endLine":85,"endColumn":29},{"ruleId":"99","severity":1,"message":"100","line":92,"column":44,"nodeType":"101","messageId":"102","endLine":92,"endColumn":46},{"ruleId":"99","severity":1,"message":"103","line":95,"column":79,"nodeType":"101","messageId":"102","endLine":95,"endColumn":81},{"ruleId":"99","severity":1,"message":"100","line":101,"column":44,"nodeType":"101","messageId":"102","endLine":101,"endColumn":46},{"ruleId":"99","severity":1,"message":"103","line":104,"column":79,"nodeType":"101","messageId":"102","endLine":104,"endColumn":81},{"ruleId":"99","severity":1,"message":"100","line":125,"column":25,"nodeType":"101","messageId":"102","endLine":125,"endColumn":27},{"ruleId":"92","severity":1,"message":"104","line":126,"column":15,"nodeType":"94","messageId":"95","endLine":126,"endColumn":21},{"ruleId":"99","severity":1,"message":"103","line":174,"column":77,"nodeType":"101","messageId":"102","endLine":174,"endColumn":79},{"ruleId":"99","severity":1,"message":"100","line":191,"column":25,"nodeType":"101","messageId":"102","endLine":191,"endColumn":27},{"ruleId":"99","severity":1,"message":"100","line":10,"column":19,"nodeType":"101","messageId":"102","endLine":10,"endColumn":21},{"ruleId":"105","severity":1,"message":"106","line":10,"column":48,"nodeType":"107","messageId":"108","endLine":10,"endColumn":58},{"ruleId":"99","severity":1,"message":"100","line":17,"column":19,"nodeType":"101","messageId":"102","endLine":17,"endColumn":21},{"ruleId":"105","severity":1,"message":"106","line":17,"column":48,"nodeType":"107","messageId":"108","endLine":17,"endColumn":58},{"ruleId":"99","severity":1,"message":"100","line":20,"column":24,"nodeType":"101","messageId":"102","endLine":20,"endColumn":26},{"ruleId":"99","severity":1,"message":"100","line":44,"column":48,"nodeType":"101","messageId":"102","endLine":44,"endColumn":50},{"ruleId":"99","severity":1,"message":"100","line":46,"column":46,"nodeType":"101","messageId":"102","endLine":46,"endColumn":48},{"ruleId":"109","severity":1,"message":"110","line":5,"column":5,"nodeType":"111","messageId":"112","endLine":7,"endColumn":6},"no-unused-vars","'QualityQuestion' is defined but never used.","Identifier","unusedVar","'QualityQuestionData' is defined but never used.","'QuestionType' is defined but never used.","'generateQuestion' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'itemId' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor"]